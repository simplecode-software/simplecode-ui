import React from 'react';
import {
    TTheme, TThemeShadowsText, TThemeShapes, TThemeShadows, TThemeBorders,
    TThemeSizes, TPresetColors, TColorSlots, TDict,
    takeSpecColor, createFlatColorset, createGhostColorset, createStateColorsetTriplet,
    createTextColorset, mapBorders, mapShadows, mapShadowsText, mapShapes,
} from '../../../src';


const specColors: TDict<string> = {
    black: '#000000',
    white: '#FFFFFF',
    lightblue10: '#FAFBFD',
    lightblue20: '#F4F6FB',
    lightblue30: '#E9EEF7',
    lightblue40: '#DEE6F3',
    lightblue50: '#C9D6EC',
    lightblue60: '#BECDE8',
    lightblue70: '#A9BDE0',
    lightblue80: '#94ADD9',
    lightblue90: '#859BC3',
    darkblue10: '#5275B0',
    darkblue20: '#49689C',
    darkblue30: '#405B89',
    darkblue40: '#384E75',
    darkblue50: '#2E4162',
    darkblue60: '#24344E',
    darkblue70: '#1B273A',
    darkblue80: '#121A27',
    darkblue90: '#090D13',
    blue10: '#75AFFA',
    blue20: '#5CA1FA',
    blue30: '#4492F9',
    blue40: '#2B84F8',
    blue50: '#1276F7',
    blue60: '#0869E8',
    blue70: '#075ECF',
    blue80: '#0653B7',
    blue90: '#05489E',
    orange10: '#FABF76',
    orange20: '#FAB45D',
    orange30: '#F9A845',
    orange40: '#F89D2C',
    orange50: '#F79213',
    orange60: '#E98508',
    orange70: '#E36C18',
    orange80: '#C96015',
    orange90: '#AE5312',
    green10: '#5ED007',
    green20: '#54BB06',
    green30: '#4BA605',
    green40: '#419104',
    green50: '#387C04',
    green60: '#2F6803',
    green70: '#255302',
    green80: '#1C3E02',
    green90: '#122901',
    gold10: '#FDF7EA',
    gold20: '#F9E2AE',
    gold30: '#F6D386',
    gold40: '#F4C865',
    gold50: '#F0B736',
    gold60: '#EEAF1E',
    gold70: '#E1A211',
    gold80: '#CA910F',
    gold90: '#B2800D',
    red10: '#FA7E75',
    red20: '#FA665C',
    red30: '#F94F44',
    red40: '#F8382B',
    red50: '#E81608',
    red60: '#CF1407',
    red70: '#B71106',
    red80: '#9E0F05',
    red90: '#850D04',
    teal10: '#E0EFEF',
    teal20: '#C3E2E5',
    teal30: '#9FD1D6',
    teal40: '#4BA3A6',
    teal50: '#007A7B',
    teal60: '#006D6E',
    teal70: '#005F63',
    teal80: '#005154',
    teal90: '#00484B',
    lime10: '#CCE3CF',
    lime20: '#BCDAC0',
    lime30: '#ABD1B0',
    lime40: '#9BC8A1',
    lime50: '#8ABF91',
    lime60: '#7AB682',
    royal10: '#ECF4FE',
    royal20: '#D4E6FD',
    royal30: '#BFDAFC',
    royal40: '#95C1FB',
    royal50: '#7FB5FA',
    royal60: '#6AA8FA',
    grey10: '#8D97AA38',
    grey20: '#ACB7CC',
    grey30: '#A3B0C7',
    grey40: '#929EB3',
    grey50: '#828C9F',
    grey60: '#727B8B',
    overlay20: '#091B46EE',
    overlay30: '#091B46BB',
    overlay40: '#091B4699',
    header10: '#091B46',
    header20: '#15254E',
    header30: '#1D346D',
    header40: '#172B59',
    header50: '#122144',
    header60: '#120A23',
    header70: '#170D2C',
};

const sizes: TThemeSizes = {
    font: {
        xxsm: 10,
        xsm: 12,
        sm: 14,
        md: 16,
        lg: 18,
        xlg: 20,
        xxlg: 22,
        auto: 16,
    },
    line: {
        xxsm: 20,
        xsm: 20,
        sm: 22,
        md: 24,
        lg: 26,
        xlg: 28,
        xxlg: 28,
        auto: null,
    },
    button: {
        xxsm: 30,
        xsm: 36,
        sm: 42,
        md: 48,
        lg: 54,
        xlg: 60,
        xxlg: 66,
        auto: null,
    },
    icon: {
        xxsm: 28,
        xsm: 32,
        sm: 36,
        md: 40,
        lg: 44,
        xlg: 48,
        xxlg: 52,
        auto: null,
    },
    item: {
        xxsm: 36,
        xsm: 42,
        sm: 48,
        md: 54,
        lg: 60,
        xlg: 66,
        xxlg: 72,
        auto: null,
    },
    divider: {
        xxsm: 0.2,
        xsm: 0.4,
        sm: 0.8,
        md: 1,
        lg: 2,
        xlg: 3,
        xxlg: 4,
        auto: null,
    },
};

const fonts: TDict<React.CSSProperties> = {
    regular: {
        fontFamily: 'Regular',
    },
    semi: {
        fontFamily: 'Semi',
    },
    bold: {
        fontFamily: 'Bold',
    },
    mono: {
        fontFamily: 'monospace',
    },
};

const shadows: TThemeShadows = mapShadows({ sm: 'black', md: 'black', lg: 'black' }, 2, 4, 6);
const shadowsText: TThemeShadowsText = mapShadowsText(
    { sm: 'rgba(0, 0, 0, 0.3)', md: 'rgba(0, 0, 0, 0.5)' },
    2,
    4,
);

const shapes: TThemeShapes = mapShapes(4, 8, 12, 16);

const borders: TThemeBorders = mapBorders(1, 2, 3, 4);

const colorSets: TPresetColors = {
    none: createTextColorset('transparent', 'transparent', 'transparent'),
    primary: createFlatColorset(
        'text.primary',
        'text.primaryplus',
        'text.primaryminus',
        'bg.primaryalt',
        'bg.primaryaltplus',
        'bg.primaryaltminus',
    ),
    primaryghost: {
        text: 'text.primary',
        textHover: 'text.primaryplus',
        textActive: 'text.primaryminus',
        bg: 'bg.primaryalt',
        bgHover: 'bg.primaryaltplus',
        bgActive: 'bg.primaryaltminus',
        border: 'bg.secondary',
        borderHover: 'bg.secondaryplus',
        borderActive: 'bg.secondaryminus',
    },
    primarytext: createTextColorset(
        'text.primary',
        'text.primaryplus',
        'text.primaryminus',
    ),
    secondary: createFlatColorset(
        'text.primary',
        'text.primaryplus',
        'text.primaryminus',
        'bg.secondary',
        'bg.secondaryplus',
        'bg.secondaryminus',
    ),
    secondaryghost: {
        text: 'text.secondary',
        textHover: 'text.secondaryplus',
        textActive: 'text.secondaryminus',
        bg: 'bg.primaryalt',
        bgHover: 'bg.primaryaltplus',
        bgActive: 'bg.primaryaltminus',
        border: 'bg.secondary',
        borderHover: 'bg.secondaryplus',
        borderActive: 'bg.secondaryminus',
    },
    secondarytext: createTextColorset(
        'text.secondary',
        'text.secondaryplus',
        'text.secondaryminus',
    ),
    tertiary: createFlatColorset(
        'text.contrast',
        'text.contrast',
        'text.contrast',
        'text.primary',
        'text.primaryplus',
        'text.primaryminus',
    ),
    tertiaryghost: createGhostColorset(
        'text.primary',
        'text.primaryplus',
        'text.primaryminus',
    ),
    tertiarytext: createTextColorset(
        'text.tertiary',
        'text.tertiaryplus',
        'text.tertiaryminus',
    ),
    accent: createTextColorset(
        'text.accent',
        'text.accentplus',
        'text.accentminus',
    ),
    accentghost: {
        text: 'text.primary',
        textHover: 'text.primaryplus',
        textActive: 'text.primaryminus',
        bg: 'bg.primaryalt',
        bgHover: 'bg.primaryaltplus',
        bgActive: 'bg.primaryaltminus',
        border: 'bg.accent',
        borderHover: 'bg.accentplus',
        borderActive: 'bg.accentminus',
    },
    accenttext: createTextColorset(
        'text.accent',
        'text.accentplus',
        'text.accentminus',
    ),
    ...createStateColorsetTriplet('success'),
    ...createStateColorsetTriplet('warning'),
    ...createStateColorsetTriplet('error'),
    light: createFlatColorset(
        'spec.darkblue90',
        'spec.darkblue80',
        'spec.darkblue70',
        'spec.white',
        'spec.white',
        'spec.white',
    ),
    lightghost: createGhostColorset(
        'spec.white',
        'spec.white',
        'spec.white',
    ),
    lighttext: createTextColorset(
        'spec.white',
        'spec.white',
        'spec.white',
    ),
    grey: createFlatColorset(
        'spec.white',
        'spec.white',
        'spec.white',
        'spec.grey30',
        'spec.grey20',
        'spec.grey40',
    ),
    greyghost: createGhostColorset(
        'spec.grey40',
        'spec.grey40',
        'spec.grey40',
    ),
    greytext: createTextColorset(
        'spec.grey40',
        'spec.grey40',
        'spec.grey40',
    ),
    dark: createFlatColorset(
        'spec.white',
        'spec.white',
        'spec.white',
        'spec.darkblue90',
        'spec.darkblue80',
        'spec.darkblue70',
    ),
    darkghost: createGhostColorset(
        'spec.darkblue90',
        'spec.darkblue80',
        'spec.darkblue70',
    ),
    darktext: createTextColorset(
        'spec.darkblue90',
        'spec.darkblue80',
        'spec.darkblue70',
    ),
} as TPresetColors;

const colorsPartial = {
    success: takeSpecColor(specColors, 'green40'),
    successplus: takeSpecColor(specColors, 'green30'),
    successminus: takeSpecColor(specColors, 'green50'),
    warning: takeSpecColor(specColors, 'orange40'),
    warningplus: takeSpecColor(specColors, 'orange20'),
    warningminus: takeSpecColor(specColors, 'orange60'),
    error: takeSpecColor(specColors, 'red50'),
} as const;

export const blue: TTheme = {
    colors: {
        spec: specColors,
        text: {
            primary: takeSpecColor(specColors, 'darkblue40'),
            primaryplus: takeSpecColor(specColors, 'darkblue20'),
            primaryminus: takeSpecColor(specColors, 'darkblue60'),
            primaryalt: takeSpecColor(specColors, 'darkblue80'),
            primaryaltplus: takeSpecColor(specColors, 'darkblue70'),
            primaryaltminus: takeSpecColor(specColors, 'darkblue90'),
            secondary: takeSpecColor(specColors, 'lightblue90'),
            secondaryplus: takeSpecColor(specColors, 'lightblue80'),
            secondaryminus: takeSpecColor(specColors, 'lightblue70'),
            tertiary: takeSpecColor(specColors, 'lightblue20'),
            tertiaryplus: takeSpecColor(specColors, 'lightblue10'),
            tertiaryminus: takeSpecColor(specColors, 'lightblue30'),
            accent: takeSpecColor(specColors, 'blue30'),
            accentplus: takeSpecColor(specColors, 'blue20'),
            accentminus: takeSpecColor(specColors, 'blue40'),
            ...colorsPartial,
            errorplus: takeSpecColor(specColors, 'red30'),
            errorminus: takeSpecColor(specColors, 'red80'),
            contrast: takeSpecColor(specColors, 'lightblue10'),
        },
        bg: {
            primary: takeSpecColor(specColors, 'lightblue20'),
            primaryplus: takeSpecColor(specColors, 'white'),
            primaryminus: takeSpecColor(specColors, 'lightblue20'),
            primaryalt: takeSpecColor(specColors, 'white'),
            primaryaltplus: takeSpecColor(specColors, 'lightblue20'),
            primaryaltminus: takeSpecColor(specColors, 'lightblue10'),
            secondary: takeSpecColor(specColors, 'lightblue30'),
            secondaryplus: takeSpecColor(specColors, 'lightblue20'),
            secondaryminus: takeSpecColor(specColors, 'lightblue40'),
            tertiary: takeSpecColor(specColors, 'darkblue40'),
            tertiaryplus: takeSpecColor(specColors, 'darkblue20'),
            tertiaryminus: takeSpecColor(specColors, 'darkblue60'),
            accent: takeSpecColor(specColors, 'orange40'),
            accentplus: takeSpecColor(specColors, 'orange10'),
            accentminus: takeSpecColor(specColors, 'orange70'),
            ...colorsPartial,
            errorplus: takeSpecColor(specColors, 'red40'),
            errorminus: takeSpecColor(specColors, 'red70'),
            contrast: takeSpecColor(specColors, 'lightblue10'),
        },
    },
    fonts,
    sizes,
    shadows,
    shadowsText,
    shapes,
    borders,
    colorSets,
};

const specColorsDark: TDict<string> = {
    ...specColors,
    lightblue10: '#97A9CD',
    lightblue20: '#859BC5',
    lightblue30: '#748DBC',
    lightblue40: '#637FB4',
    lightblue50: '#5371AB',
    lightblue60: '#4A659A',
    lightblue70: '#425A89',
    lightblue80: '#3A4F77',
    lightblue90: '#314366',
    overlay20: '#091B46EE',
    overlay30: '#091B46BB',
    overlay40: '#091B4699',
    header10: '#091B46',
    header20: '#08183F',
    header30: '#071538',
    header40: '#0A1F52',
    header50: '#091B46',
    header60: '#06122F',
    header70: '#030A19',
    royal10: '#E5E3FC',
    royal20: '#B9B4F8',
    royal30: '#A29CF5',
    royal40: '#8B83F3',
    royal50: '#736AF1',
    royal60: '#5C52EE',
};

const shadowsDark: TThemeShadows = mapShadows({ sm: '#67EFE3', md: '#67EFE3', lg: '#67EFE3' }, 2, 4, 6);
const shadowsTextDark: TThemeShadowsText = mapShadowsText(
    { sm: 'rgba(57,134,125, 0.5);', md: 'rgba(57,134,125, 0.8);' },
    2,
    4,
);

const colorsPartialDark = {
    success: takeSpecColor(specColorsDark, 'green40'),
    successplus: takeSpecColor(specColorsDark, 'green30'),
    successminus: takeSpecColor(specColorsDark, 'green50'),
    warning: takeSpecColor(specColorsDark, 'orange40'),
    warningplus: takeSpecColor(specColorsDark, 'orange20'),
    warningminus: takeSpecColor(specColorsDark, 'orange60'),
    error: takeSpecColor(specColorsDark, 'red50'),
} as const;

export const dark: TTheme = {
    colors: {
        spec: specColorsDark,
        text: {
            primary: takeSpecColor(specColorsDark, 'royal10'),
            primaryplus: takeSpecColor(specColorsDark, 'white'),
            primaryminus: takeSpecColor(specColorsDark, 'royal20'),
            primaryalt: takeSpecColor(specColorsDark, 'white'),
            primaryaltplus: takeSpecColor(specColorsDark, 'royal10'),
            primaryaltminus: takeSpecColor(specColorsDark, 'royal10'),
            secondary: takeSpecColor(specColorsDark, 'royal20'),
            secondaryplus: takeSpecColor(specColorsDark, 'royal10'),
            secondaryminus: takeSpecColor(specColorsDark, 'darkblue50'),
            tertiary: takeSpecColor(specColorsDark, 'darkblue40'),
            tertiaryplus: takeSpecColor(specColorsDark, 'darkblue20'),
            tertiaryminus: takeSpecColor(specColorsDark, 'darkblue60'),
            accent: takeSpecColor(specColorsDark, 'blue30'),
            accentplus: takeSpecColor(specColorsDark, 'blue20'),
            accentminus: takeSpecColor(specColorsDark, 'blue40'),
            ...colorsPartialDark,
            errorplus: takeSpecColor(specColorsDark, 'red30'),
            errorminus: takeSpecColor(specColorsDark, 'red80'),
            contrast: takeSpecColor(specColorsDark, 'darkblue80'),
        },
        bg: {
            primary: takeSpecColor(specColorsDark, 'darkblue40'),
            primaryplus: takeSpecColor(specColorsDark, 'darkblue20'),
            primaryminus: takeSpecColor(specColorsDark, 'darkblue60'),
            primaryalt: takeSpecColor(specColorsDark, 'darkblue80'),
            primaryaltplus: takeSpecColor(specColorsDark, 'darkblue70'),
            primaryaltminus: takeSpecColor(specColorsDark, 'darkblue90'),
            secondary: takeSpecColor(specColorsDark, 'darkblue60'),
            secondaryplus: takeSpecColor(specColorsDark, 'darkblue50'),
            secondaryminus: takeSpecColor(specColorsDark, 'darkblue70'),
            tertiary: takeSpecColor(specColorsDark, 'lightblue20'),
            tertiaryplus: takeSpecColor(specColorsDark, 'lightblue10'),
            tertiaryminus: takeSpecColor(specColorsDark, 'lightblue30'),
            accent: takeSpecColor(specColorsDark, 'orange40'),
            accentplus: takeSpecColor(specColorsDark, 'orange10'),
            accentminus: takeSpecColor(specColorsDark, 'orange70'),
            ...colorsPartialDark,
            errorplus: takeSpecColor(specColorsDark, 'red40'),
            errorminus: takeSpecColor(specColorsDark, 'red70'),
            contrast: takeSpecColor(specColorsDark, 'darkblue80'),
        },
    },
    fonts,
    sizes,
    shadows: shadowsDark,
    shadowsText: shadowsTextDark,
    shapes,
    borders,
    colorSets,
};

const specColorsContrast: TDict<string> = {
    ...specColors,
    darkblue10: takeSpecColor(specColors, 'darkblue60'),
    darkblue20: takeSpecColor(specColors, 'darkblue70'),
    darkblue30: takeSpecColor(specColors, 'darkblue80'),
    darkblue40: takeSpecColor(specColors, 'darkblue90'),
    darkblue50: takeSpecColor(specColors, 'black'),
    darkblue60: takeSpecColor(specColors, 'black'),
    darkblue70: takeSpecColor(specColors, 'black'),
    darkblue80: takeSpecColor(specColors, 'black'),
    darkblue90: takeSpecColor(specColors, 'black'),
    grey10: '#D1D5DD',
    grey20: '#8D97AA',
    grey30: takeSpecColor(specColors, 'grey20'),
    grey40: takeSpecColor(specColors, 'grey50'),
    grey50: takeSpecColor(specColors, 'grey60'),
    grey60: takeSpecColor(specColors, 'grey60'),
    overlay20: `${takeSpecColor(specColorsDark, 'header10')}F0`,
    overlay30: `${takeSpecColor(specColorsDark, 'header10')}EE`,
    overlay40: `${takeSpecColor(specColorsDark, 'header10')}E0`,
    header10: takeSpecColor(specColorsDark, 'header10'),
    header20: takeSpecColor(specColorsDark, 'header20'),
    header30: takeSpecColor(specColorsDark, 'header30'),
    header40: takeSpecColor(specColorsDark, 'header40'),
    header50: takeSpecColor(specColorsDark, 'header50'),
    header60: takeSpecColor(specColorsDark, 'header60'),
    header70: takeSpecColor(specColorsDark, 'header70'),
};

const colorSetsContrast: TPresetColors = {
    ...colorSets,
    primaryghost: {
        text: 'text.primary',
        textHover: 'text.primaryplus',
        textActive: 'text.primaryminus',
        bg: 'bg.primaryalt',
        bgHover: 'bg.primaryaltplus',
        bgActive: 'bg.primaryaltminus',
        border: 'text.primary',
        borderHover: 'text.primaryplus',
        borderActive: 'text.primaryminus',
    },
    secondaryghost: {
        text: 'text.secondary',
        textHover: 'text.secondaryplus',
        textActive: 'text.secondaryminus',
        bg: 'bg.primaryalt',
        bgHover: 'bg.primaryaltplus',
        bgActive: 'bg.primaryaltminus',
        border: 'text.primary',
        borderHover: 'text.primaryplus',
        borderActive: 'text.primaryminus',
    },
};

const slotsContrastText: TColorSlots = {
    primary: takeSpecColor(specColorsContrast, 'black'),
    primaryplus: takeSpecColor(specColorsContrast, 'black'),
    primaryminus: takeSpecColor(specColorsContrast, 'black'),
    primaryalt: takeSpecColor(specColorsContrast, 'black'),
    primaryaltplus: takeSpecColor(specColorsContrast, 'black'),
    primaryaltminus: takeSpecColor(specColorsContrast, 'black'),
    secondary: takeSpecColor(specColorsContrast, 'black'),
    secondaryplus: takeSpecColor(specColorsContrast, 'black'),
    secondaryminus: takeSpecColor(specColorsContrast, 'black'),
    tertiary: takeSpecColor(specColorsContrast, 'grey60'),
    tertiaryplus: takeSpecColor(specColorsContrast, 'grey60'),
    tertiaryminus: takeSpecColor(specColorsContrast, 'grey60'),
    accent: takeSpecColor(specColorsContrast, 'blue60'),
    accentplus: takeSpecColor(specColorsContrast, 'blue40'),
    accentminus: takeSpecColor(specColorsContrast, 'blue80'),
    success: takeSpecColor(specColorsDark, 'green70'),
    successplus: takeSpecColor(specColorsDark, 'green60'),
    successminus: takeSpecColor(specColorsDark, 'green80'),
    warning: takeSpecColor(specColorsDark, 'orange70'),
    warningplus: takeSpecColor(specColorsDark, 'orange60'),
    warningminus: takeSpecColor(specColorsDark, 'orange80'),
    error: takeSpecColor(specColorsDark, 'red70'),
    errorplus: takeSpecColor(specColorsDark, 'red60'),
    errorminus: takeSpecColor(specColorsDark, 'red80'),
    contrast: takeSpecColor(specColorsContrast, 'white'),
};

export const contrast: TTheme = {
    colors: {
        spec: specColorsContrast,
        text: slotsContrastText,
        bg: {
            ...slotsContrastText,
            primary: takeSpecColor(specColorsContrast, 'royal10'),
            primaryplus: takeSpecColor(specColorsContrast, 'royal20'),
            primaryminus: takeSpecColor(specColorsContrast, 'royal20'),
            primaryalt: takeSpecColor(specColorsContrast, 'white'),
            primaryaltplus: takeSpecColor(specColorsContrast, 'lightblue20'),
            primaryaltminus: takeSpecColor(specColorsContrast, 'lightblue30'),
            secondary: takeSpecColor(specColorsContrast, 'grey10'),
            secondaryplus: takeSpecColor(specColorsContrast, 'grey20'),
            secondaryminus: takeSpecColor(specColorsContrast, 'grey20'),
            tertiary: takeSpecColor(specColorsContrast, 'white'),
            tertiaryplus: takeSpecColor(specColorsContrast, 'grey10'),
            tertiaryminus: takeSpecColor(specColorsContrast, 'grey10'),
            accent: takeSpecColor(specColorsContrast, 'orange80'),
            accentplus: takeSpecColor(specColorsContrast, 'orange70'),
            accentminus: takeSpecColor(specColorsContrast, 'orange90'),
        },
    },
    fonts,
    sizes,
    shadows,
    shadowsText,
    shapes,
    borders,
    colorSets: colorSetsContrast,
};
